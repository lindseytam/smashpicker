{"version":3,"sources":["assets/background.png","components/Background.jsx","components/Button.jsx","components/CharactersGrid.jsx","assets/loading-logo.png","pages/SplashScreen.jsx","components/Generate.jsx","components/Error.jsx","pages/SelectionScreen.jsx","components/SelectedCharacter.jsx","pages/ResultScreen.jsx","FirebaseConnector/FirebaseConnector.js","AppComponent.jsx","reportWebVitals.js","index.js"],"names":["Background","props","children","Fragment","id","src","img","className","href","target","rel","Button","color","onClick","style","display","DropdownButton","name","activeDropdown","setActiveDropdown","options","onChange","position","height","map","e","text","value","ToggleButton","curVal","toggleVal","useState","enabled","setEnabled","useEffect","CharactersGrid","theme","tagData","charData","setLoaded","omitChars","setOmitChars","imagesToLoad","setImagesToLoad","length","Object","keys","clickImg","includes","valid","filter","elem","invalid","item","imgPath","Img","Name","validChars","onLoad","renderImg","ResultScreen","zIndex","width","backgroundColor","top","left","justifyContent","alignItems","logo","alt","Generate","unique","numPlayers","setError","chosenChars","setChosenChars","setValid","removeInvalid","allOptions","remove","chooseChar","chooseFrom","Math","floor","random","randomTheme","setChars","chosen","_","cloneDeep","i","choose","push","chooseAllChars","includesError","undefined","propTypes","PropTypes","string","array","bool","number","func","Error","screenSize","SelectionScreen","setOnSelectionScreen","setNumPlayers","setTheme","setUnique","setOptions","loaded","error","tags","concat","uniqueTags","Set","SplashScreen","val","parseInt","split","playerColors","SelectedCharacter","characterName","characterImgUrl","playerNum","shuffle","setShuffle","delay","ms","Promise","resolve","setTimeout","handleShuffle","a","char","require","config","FirebaseConnector","setTagData","setCharData","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_STORAGE","messagingSenderId","appId","measurementId","initializeApp","db","getDatabase","data","ref","onValue","snapshot","getCharData","getTagData","AppComponent","onSelectionScreen","getScreenSize","window","innerWidth","innerHeight","setScreenSize","addEventListener","content","isUnique","numChosen","numAvailable","checkUnique","event","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d0ecb92.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.f3769753.png\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport img from '../assets/background.png'\n\nfunction Background (props) {\n  const { children } = props\n\n  return (<React.Fragment>\n    {children}\n    <div id=\"app-background\">\n      <div id=\"background-bar\" />\n      <img id=\"background-img\" src={img}/>\n      <p className=\"Suggestions-Content\">Have a suggestion? Give us some feedback <a href=\"https://forms.gle/18p1JQgghmbrQkpV9\" target=\"_blank\" rel=\"noreferrer\">here</a></p>\n    </div>\n  </React.Fragment>\n  )\n}\n\nBackground.propTypes = {\n  children: PropTypes.any\n}\n\nexport default Background\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Button (props) {\n  const { children, color, className, onClick, style } = props\n\n  return (\n    <button style={{ ...style, display: 'inline' }} onClick={onClick} className={`${className} button-${color} button bordered drop-shadow parallelogram`}>\n      <span>{children}</span>\n    </button>\n  )\n}\n\nfunction DropdownButton (props) {\n  const { name, activeDropdown, setActiveDropdown, children, color, className, options, onChange, style } = props\n\n  const toggleMenu = () => {\n    if (activeDropdown) {\n      setActiveDropdown(null)\n    } else {\n      setActiveDropdown(name)\n    }\n  }\n\n  return (\n    <div style={{ ...style, display: 'inline', position: 'relative' }} className='button-container'>\n      <button onClick={toggleMenu} className={`${className} dropdown-button button-${color} button bordered drop-shadow parallelogram`}>\n        <span>\n          {children}\n        </span>\n      </button>\n      <div className={`dropdown-content ${activeDropdown ? 'bordered' : ''} drop-shadow`} style={{ height: activeDropdown ? 'auto' : '0' }}>\n        {options.map(e => <a className=\"dropdown-element\" onClick={e => onChange(e.target.text)} value={e} key={e}>{e}</a>)}\n      </div>\n  </div>)\n}\n\nfunction ToggleButton (props) {\n  const { children, curVal, toggleVal, style } = props\n  const [enabled, setEnabled] = useState(curVal)\n\n  const toggleButton = () => {\n    setEnabled(!enabled)\n    toggleVal()\n  }\n\n  useEffect(() => {\n    setEnabled(curVal)\n  }, [curVal])\n\n  return (\n    <button style={{ ...style, display: 'inline' }} onClick={toggleButton} className={`dropdown-button button-${enabled ? 'green' : 'red'} button bordered drop-shadow parallelogram`}>\n      <span>\n        {children}\n      </span>\n    </button>)\n}\n\nconst basePropTypes = {\n  color: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.any,\n  style: PropTypes.object\n}\n\nconst buttonPropTypes = {\n  ...basePropTypes\n}\n\nconst dropdownPropTypes = {\n  ...basePropTypes,\n  options: PropTypes.array,\n  onChange: PropTypes.func\n}\n\nconst togglePropTypes = {\n  style: PropTypes.object,\n  children: basePropTypes.children,\n  curVal: PropTypes.bool,\n  toggleVal: PropTypes.func\n}\n\nButton.propTypes = buttonPropTypes\nDropdownButton.propTypes = dropdownPropTypes\nToggleButton.propTypes = togglePropTypes\n\nexport { DropdownButton, Button, ToggleButton }\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport './../styles/CharactersGridStyle.css'\n\nfunction CharactersGrid (props) {\n  const { theme, tagData, charData, setLoaded, omitChars, setOmitChars } = props\n  const [imagesToLoad, setImagesToLoad] = useState(null)\n\n  useEffect(() => {\n    if (charData.length > 0 && Object.keys(charData[0]).length > 0) {\n      setImagesToLoad(Object.keys(charData[0]).length)\n    }\n  }, [charData])\n\n  useEffect(() => {\n    if (imagesToLoad === 0) {\n      setLoaded(true)\n    }\n  }, [imagesToLoad])\n\n  useEffect(() => {\n    if (theme === 'Random Theme') {\n      setLoaded(true)\n    }\n  }, [theme])\n\n  const clickImg = (e) => {\n    // remove from omit list\n    if (omitChars.includes(e.target.id)) {\n      const valid = omitChars.filter(elem => elem !== e.target.id)\n      setOmitChars(valid)\n\n      // add to omit list\n    } else {\n      const invalid = [...omitChars, e.target.id]\n      setOmitChars(invalid)\n    }\n  }\n\n  const renderImg = (item) => {\n    const imgPath = charData[0][item].Img\n    const id = charData[0][item].Name\n    const validChars = (theme === 'All Characters' || theme === 'Random Theme') ? Object.keys(charData[0]) : tagData[0][theme]\n    return (\n      <div key={item} className={omitChars.includes(id) || !validChars.includes(id) ? 'Omit column' : 'column' }>\n        <div className=\"card\">\n          <img\n            id={id}\n            onClick={clickImg}\n            className=\"Char-Img\"\n            src={imgPath}\n            onLoad={() => setImagesToLoad(imagesToLoad - 1)}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"Char-Grid\">\n       <div className=\"row\">\n         {(charData.length === 0) ? [] : Object.keys(charData[0]).map((item) => renderImg(item))}\n       </div>\n    </div>\n  )\n}\n\nCharactersGrid.propTypes = {\n  theme: PropTypes.string,\n  tagData: PropTypes.array,\n  charData: PropTypes.array,\n  omitChars: PropTypes.array,\n  setOmitChars: PropTypes.func,\n  setLoaded: PropTypes.func\n}\n\nexport default CharactersGrid\n","export default __webpack_public_path__ + \"static/media/loading-logo.0fb25ec2.png\";","import React from 'react'\nimport logo from '../assets/loading-logo.png'\n\nfunction ResultScreen () {\n  return (\n    <div style={{ position: 'absolute', zIndex: 3, height: '100vh', width: '100vw', backgroundColor: 'var(--black)', top: 0, left: 0, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n      <img src={logo} className=\"loading-logo\" alt=\"logo\" />\n    </div>)\n}\n\nResultScreen.propTypes = {\n}\n\nexport default ResultScreen\n","import { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nfunction Generate (props) {\n  const { theme, omitChars, tagData, charData, unique, numPlayers, setError, chosenChars, setChosenChars } = props\n  const [valid, setValid] = useState([]) // tracks which chars match criteria\n\n  const setChars = () => {\n    if (charData.length !== 0 && theme === 'All Characters') { // user chose all chars\n      removeInvalid(Object.keys(charData[0]))\n    } else if (charData.length !== 0 && theme === 'Random Theme') { // user chose random theme\n      const randomTheme = chooseChar(Object.keys(tagData[0]))\n      removeInvalid(tagData[0][randomTheme])\n    } else if (charData.length !== 0) { removeInvalid(tagData[0][theme]) } // user chose firebase theme\n  }\n\n  // remove omitted chars\n  const removeInvalid = (allOptions) => {\n    const remove = allOptions.filter((item) => !omitChars.includes(item))\n    setValid(remove)\n  }\n\n  // choose all chars\n  const chooseAllChars = () => {\n    const chosen = []\n    let validChars = _.cloneDeep(valid)\n\n    for (let i = 0; i < numPlayers; i++) {\n      const choose = chooseChar(validChars)\n      chosen.push(choose)\n      if (unique) {\n        validChars = validChars.filter(function (e) { return e !== choose })\n      }\n    }\n\n    setChosenChars(chosen)\n  }\n\n  // choose a random char from array\n  const chooseChar = (chooseFrom) => {\n    const index = Math.floor(Math.random() * chooseFrom.length)\n    return chooseFrom[index]\n  }\n\n  useEffect(() => {\n    setChars()\n  }, [theme, charData, omitChars, numPlayers])\n\n  useEffect(() => {\n    chooseAllChars()\n  }, [valid, unique])\n\n  useEffect(() => {\n    const includesError = chosenChars.includes(null) || chosenChars.includes(undefined)\n    setError(includesError)\n  }, [chosenChars, numPlayers])\n\n  return null\n}\n\nGenerate.propTypes = {\n  theme: PropTypes.string,\n  omitChars: PropTypes.array,\n  tagData: PropTypes.array,\n  charData: PropTypes.array,\n  unique: PropTypes.bool,\n  numPlayers: PropTypes.number,\n  chosenChars: PropTypes.array,\n  setError: PropTypes.func\n}\n\nexport default Generate\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from './../components/Button'\nimport './../styles/Error.css'\n\nfunction Error (props) {\n  const { setError, screenSize } = (props)\n\n  return (\n    <div\n      id=\"error\"\n      className={(screenSize === 'mobile')\n        ? 'Error-Message bordered drop-shadow center'\n        : 'Error-Message parallelogram bordered drop-shadow center'}>\n        <div className=\"Error-Contents\">\n\n            <h2><i>Not enough characters enabled</i></h2>\n            <p>Please enable more characters to choose from before continuing.</p>\n            <Button\n              className=\"uppercase extrabold italic\"\n              color=\"golden\"\n              onClick={() => setError(false)}\n              style={{ top: '3em' }}\n            >\n            OK\n            </Button>\n        </div>\n    </div>\n  )\n}\n\nError.propTypes = {\n  setError: PropTypes.func,\n  screenSize: PropTypes.string\n}\n\nexport default Error\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { DropdownButton, Button, ToggleButton } from '../components/Button'\nimport CharactersGrid from '../components/CharactersGrid'\nimport SplashScreen from './SplashScreen'\nimport Generate from '../components/Generate'\nimport Error from './../components/Error'\n\nfunction SelectionScreen (props) {\n  const { theme, numPlayers, unique, setOnSelectionScreen, setNumPlayers, setTheme, setUnique, charData, tagData, omitChars, setOmitChars, chosenChars, setChosenChars, screenSize } = props\n  const [activeDropdown, setActiveDropdown] = useState(null)\n  const [options, setOptions] = useState(['Random Theme', 'All Characters'])\n  const [loaded, setLoaded] = useState((charData.length !== 0))\n  const [error, setError] = useState(false) // tracks which chars match criteria\n\n  useEffect(() => {\n    if (tagData.length !== 0) {\n      const tags = Object.keys(tagData[0]).concat(options)\n      const uniqueTags = [...new Set(tags)] // ensure all vals are unique\n      setOptions(uniqueTags)\n    }\n  }, [tagData])\n\n  const playersOnSelect = (val) => {\n    const numPlayers = parseInt(val.split(' ')[0])\n    setNumPlayers(numPlayers)\n    setActiveDropdown(null)\n  }\n\n  const themeOnSelect = (val) => {\n    setTheme(val)\n    setActiveDropdown(null)\n  }\n\n  const handleScreenChange = () => {\n    const includesError = chosenChars.includes(null) || chosenChars.includes(undefined)\n    if (includesError) setError(true)\n    else setOnSelectionScreen(false)\n  }\n\n  return (\n    <React.Fragment>\n    {!loaded && <SplashScreen/>}\n    { loaded &&\n      <>\n        { error &&\n          <>\n            <div id=\"background-blur\"/>\n            <Error screenSize={screenSize} setError={setError} />\n          </>\n        }\n      </>\n    }\n    <div\n      id=\"selection-panel\"\n      className={(screenSize === 'mobile') ? 'container bordered drop-shadow' : 'parallelogram bordered drop-shadow center' }\n      style={{ display: loaded ? 'block' : 'none' }}\n    >\n      <div className=\"panel-contents\">\n        <div id=\"button-bar\">\n          <DropdownButton\n            name=\"playersDropdown\"\n            activeDropdown={activeDropdown === 'playersDropdown'}\n            setActiveDropdown={setActiveDropdown}\n            options={['1 Player', '2 Players', '3 Players', '4 Players', '5 Players', '6 Players', '7 Players', '8 Players']}\n            onChange={playersOnSelect}\n          >\n            {`${numPlayers} ${numPlayers > 1 ? 'Players' : 'Player'}`}\n          </DropdownButton>\n          <DropdownButton name=\"themeDropdown\" activeDropdown={activeDropdown === 'themeDropdown'} setActiveDropdown={setActiveDropdown} options={options} onChange={themeOnSelect}>\n            {theme}\n          </DropdownButton>\n          <ToggleButton curVal={unique} toggleVal={() => setUnique(!unique)}>{unique ? 'Unique' : 'Not Unique'}</ToggleButton>\n        </div>\n\n        <CharactersGrid\n          theme={theme}\n          tagData={tagData}\n          charData={charData}\n          setLoaded={setLoaded}\n          omitChars={omitChars}\n          setOmitChars={setOmitChars}\n        />\n        { loaded && <Generate chosenChars={chosenChars} setChosenChars={setChosenChars} theme={theme} omitChars={omitChars} tagData={tagData} charData={charData} unique={unique} numPlayers={numPlayers} setError={setError}/> }\n        <Button\n          className=\"uppercase extrabold italic\"\n          color=\"golden\"\n          onClick={() => handleScreenChange()}\n          style={{ top: '2em' }}\n          >\n          Generate\n        </Button>\n      </div>\n    </div>\n    </React.Fragment>)\n}\n\nSelectionScreen.propTypes = {\n  theme: PropTypes.string,\n  numPlayers: PropTypes.number,\n  unique: PropTypes.bool,\n  setOnSelectionScreen: PropTypes.func,\n  setNumPlayers: PropTypes.func,\n  setTheme: PropTypes.func,\n  setUnique: PropTypes.func,\n  charData: PropTypes.array,\n  tagData: PropTypes.array,\n  omitChars: PropTypes.array,\n  setOmitChars: PropTypes.func,\n  chosenChars: PropTypes.array,\n  setChosenChars: PropTypes.func,\n  screenSize: PropTypes.string\n}\n\nexport default SelectionScreen\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst playerColors = {\n  1: 'red',\n  2: 'blue',\n  3: 'yellow',\n  4: 'green',\n  5: 'orange',\n  6: 'cyan',\n  7: 'pink',\n  8: 'purple'\n}\n\nfunction SelectedCharacter (props) {\n  const { characterName, characterImgUrl, playerNum, screenSize } = props\n\n  const desktopView = () => {\n    return (\n      <div\n        className='selected-character-box selection'\n        style={{\n          backgroundColor: 'var(--' + playerColors[playerNum] + ')'\n        }}\n      >\n        <h2 className=\"Player-Num\">P{playerNum}</h2>\n\n        <div className=\"content\">\n          <img src={characterImgUrl}/>\n          <div className=\"char-name-border\"/>\n          <div className=\"name-box desktop-slant\">\n            <h1 className=\"Selected-Char-Name\">{characterName}</h1>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const mobileView = () => {\n    return (\n      <div className=\"Selected-Char\">\n        <h2 className=\"Player-Num\">P{playerNum}</h2>\n        <div className=\"parallelogram drop-shadow\">\n          <div\n            className='selected-character-box selection'\n            style={{\n              backgroundColor: 'var(--' + playerColors[playerNum] + ')'\n            }}\n          >\n            <div className=\"content\">\n              <img src={characterImgUrl}/>\n              <div className=\"name-box mobile-slant\"/>\n                <div className=\"name-box \">\n                  <h1 className=\"Selected-Char-Name\">{characterName}</h1>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n    {screenSize === 'mobile' ? mobileView() : desktopView()}\n    </>\n  )\n}\n\nSelectedCharacter.propTypes = {\n  characterName: PropTypes.string,\n  characterImgUrl: PropTypes.string,\n  playerNum: PropTypes.number,\n  screenSize: PropTypes.string\n}\n\nexport default SelectedCharacter\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from '../components/Button'\nimport Generate from '../components/Generate'\nimport SelectedCharacter from '../components/SelectedCharacter'\nimport './../styles/ResultScreen.css'\n\nfunction ResultScreen (props) {\n  const { numPlayers, theme, chosenChars, setChosenChars, omitChars, tagData, unique, charData, setOnSelectionScreen, screenSize } = props\n  const [shuffle, setShuffle] = useState(false)\n\n  // helper function to wait X seconds\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n  const handleShuffle = async () => {\n    setShuffle(true)\n    await delay(1000) // wait for one second\n    setShuffle(false)\n  }\n\n  const renderImg = () => {\n    const isError = chosenChars.includes(null) ||\n      chosenChars.includes(undefined) ||\n      charData[0].length === 0\n    if (!isError) {\n      return (\n        chosenChars.map((char, i) =>\n          (char !== undefined) && (charData[0][char] !== undefined) &&\n           <SelectedCharacter\n            key={char}\n            characterName={charData[0][char].Name}\n            characterImgUrl={charData[0][char].Img}\n            playerNum={i + 1}\n            screenSize={screenSize}\n          />\n        )\n      )\n    } else return null\n  }\n\n  return (\n    <>\n      <div\n        id=\"results-screen\"\n        className={(screenSize === 'mobile') ? 'container' : 'Results-Screen'}\n      >\n        <div\n          className={ (screenSize === 'mobile')\n            ? 'results-container drop-shadow'\n            : 'parallelogram results-container bordered drop-shadow res'}\n        >\n          {renderImg()}\n        </div>\n        <div className=\"Result-Buttons-Container\">\n          <Button onClick={() => setOnSelectionScreen(true)} className=\"uppercase extrabold\"><span>Back</span></Button>\n          <Button onClick={handleShuffle} className=\"uppercase extrabold\" color=\"golden\">Shuffle</Button>\n        </div>\n      </div>\n      {shuffle &&\n        <Generate\n          chosenChars={chosenChars}\n          setChosenChars={setChosenChars}\n          theme={theme} omitChars={omitChars}\n          tagData={tagData}\n          charData={charData}\n          unique={unique}\n          numPlayers={numPlayers}\n          setError={() => null}\n        />\n      }\n    </>\n  )\n}\n\nResultScreen.propTypes = {\n  numPlayers: PropTypes.number,\n  theme: PropTypes.string,\n  chosenChars: PropTypes.array,\n  setChosenChars: PropTypes.func,\n  omitChars: PropTypes.array,\n  tagData: PropTypes.array,\n  unique: PropTypes.bool,\n  charData: PropTypes.array,\n  setOnSelectionScreen: PropTypes.func,\n  screenSize: PropTypes.string\n}\n\nexport default ResultScreen\n","import { useEffect } from 'react'\nimport { initializeApp } from 'firebase/app'\nimport { getDatabase, ref, onValue } from 'firebase/database'\nrequire('dotenv').config()\n\nconst FirebaseConnector = (props) => {\n  const { setTagData, setCharData } = props\n  let initialize = false\n\n  const config = {\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE,\n    projectId: process.env.REACT_APP_PROJECTID,\n    storageBucket: process.env.REACT_APP_STORAGE,\n    messagingSenderId: process.env.REACT_APP_SENDERID,\n    appId: process.env.REACT_APP_APPID,\n    measurementId: process.env.REACT_APP_MEASUREMENTID\n  }\n\n  initializeApp(config)\n  const db = getDatabase()\n\n  const getCharData = () => {\n    const data = ref(db, 'chars')\n    onValue(data, (snapshot) => {\n      setCharData([snapshot.val()])\n    })\n  }\n\n  const getTagData = () => {\n    const data = ref(db, 'tags')\n    onValue(data, (snapshot) => {\n      setTagData([snapshot.val()])\n    })\n  }\n\n  initialize = true\n  useEffect(() => {\n    getCharData()\n    getTagData()\n  }, [initialize])\n\n  return null\n}\n\nexport default FirebaseConnector\n","import React, { useState, useEffect } from 'react'\nimport Background from './components/Background'\nimport SelectionScreen from './pages/SelectionScreen'\nimport ResultScreen from './pages/ResultScreen'\nimport FirebaseConnector from './FirebaseConnector/FirebaseConnector'\nimport './styles/Devices/Mobile.css'\nimport './styles/SelectionScreen.css'\n\nfunction AppComponent () {\n  const [onSelectionScreen, setOnSelectionScreen] = useState(true)\n  const [numPlayers, setNumPlayers] = useState(4)\n  const [theme, setTheme] = useState('All Characters')\n  const [charData, setCharData] = useState([]) // data on all chars\n  const [tagData, setTagData] = useState([]) // data on all chars in a theme\n  const [omitChars, setOmitChars] = useState([]) // tracks which chars to omit\n  const [chosenChars, setChosenChars] = useState([]) // tracks which chars are chosen\n  const [unique, setUnique] = useState(true)\n\n  const getScreenSize = () => {\n    const width = window.innerWidth\n    const height = window.innerHeight\n    if (width < 768 || height < 450) return 'mobile'\n    else if (width < 1367) return 'tablet'\n    else return 'desktop'\n  }\n\n  const [screenSize, setScreenSize] = useState(getScreenSize)\n\n  window.addEventListener(\n    'resize', function () { setScreenSize(getScreenSize) }, true)\n\n  // check if there is enough options for all unique chars\n  const checkUnique = () => {\n    const numChosen = chosenChars.length\n    if (tagData.length === 1) {\n      const numAvailable = (theme === 'Random Theme' || theme === 'All Characters')\n        ? Object.keys(charData[0]).length\n        : tagData[0][theme].length\n      return numChosen !== 0 && numChosen <= numAvailable\n    }\n  }\n\n  const handleCharChange = (event) => {\n    setCharData(event)\n  }\n\n  const handleTagChange = (event) => {\n    setTagData(event)\n  }\n\n  const handleOmittedChars = (event) => {\n    setOmitChars(event)\n  }\n  let content = null\n\n  useEffect(() => {\n    if (theme === 'Random Theme') {\n      setUnique(false)\n    } else {\n      const isUnique = checkUnique()\n      setUnique((isUnique === undefined) ? true : isUnique)\n    }\n  }, [theme])\n\n  if (onSelectionScreen) {\n    content = (\n    <React.Fragment>\n      <FirebaseConnector\n          setCharData={handleCharChange}\n          setTagData={handleTagChange}\n        />\n        <SelectionScreen\n          numPlayers={numPlayers}\n          theme={theme}\n          unique={unique}\n          setOnSelectionScreen={setOnSelectionScreen}\n          setNumPlayers={setNumPlayers}\n          setTheme={setTheme}\n          setUnique={setUnique}\n          charData={charData}\n          tagData={tagData}\n          omitChars={omitChars}\n          setOmitChars={handleOmittedChars}\n          chosenChars={chosenChars}\n          setChosenChars={setChosenChars}\n          screenSize={screenSize}\n        />\n    </React.Fragment>)\n  } else {\n    content = (\n      <ResultScreen\n        numPlayers={numPlayers}\n        theme={theme}\n        chosenChars={chosenChars}\n        setChosenChars={setChosenChars}\n        omitChars={omitChars}\n        tagData={tagData}\n        unique={unique}\n        charData={charData}\n        setOnSelectionScreen={setOnSelectionScreen}\n        screenSize={screenSize}\n      />\n    )\n  }\n  return (\n  <Background>\n    {content}\n  </Background>)\n}\n\nexport default AppComponent\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport AppComponent from './AppComponent'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <header className=\"App-header\">\n      <h1 className=\"outline\">Smash Picker</h1>\n    </header>\n    <AppComponent />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}